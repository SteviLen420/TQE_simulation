(* SPDX-License-Identifier: MIT *)
(* Copyright (c) 2025 Stefan Len *)

(* ================================================================== *)
(*  TQE_Wolfram_Compare_From_MathCheck_Pipeline.nb                    *)
(*  Author: Stefan Len                                                *)
(* ================================================================== *)
(*  Notes: Compares E+I vs E-only based on CSV tables.                *)

(* ========= User inputs ========= *)
rootAll = "/Users/stevilen/Desktop/TQE_E_plus_I_vs_E_only";

(* ========= Helpers ========= *)

safeImportDataset[f_] := Quiet @ Check[Import[f, "Dataset"], Dataset[{}]];

listCSVs[root_] := Module[{all},
  all = Union[
    FileNames["*.csv", root, Infinity],
    FileNames["*.CSV", root, Infinity]
  ];
  Print["ðŸ“„ CSVs under ", root, ": ", Length[all]];
  Print /@ Take[all, UpTo[10]];
  all
];

(* Find all CSV for EI or E-only *)
findAllMathChecks[root_, variant_] := Module[{all, keep, pats},
  pats = If[variant === "EI",
    {"_EI_", "E_plus_I", "E+I"},
    {"energy_only", "E_only", "energy-only"}
  ];
  all = Union[
    FileNames["*.csv", root, Infinity],
    FileNames["*.CSV", root, Infinity]
  ];
  keep = Select[all, AnyTrue[pats, StringContainsQ[FileNameTake[#], #2, IgnoreCase -> True] &] &];
  keep = Union[keep];
  SortBy[keep, FileDate]
];

(* === collect all metrics from all rows (robust) === *)
summarizeAllFromMathCheck[ds_] := Module[{rows},
  rows = Normal @ ds;  (* rows are already Associations *)
  Association @ Cases[rows, r_Association :>
    Module[{fname, cols},
      (* read fields directly from the association 'r' *)
      fname = Lookup[r, "File", "unknown"];
      cols  = Lookup[r, "Columns", <||>];
      If[!AssociationQ[cols], cols = <||>];  (* guard: if Columns isn't an association *)

      fname -> Association @ Table[
        c -> Lookup[Lookup[cols, c, <||>], "Mean", Missing["NA"]],
        {c, Keys[cols]}
      ]
    ]
  ]
];

(* -- pull a single stat from the raw math_check Dataset --
   from a row whose "File" contains fileTag; then take column 'col'
   and return its "Mean" or "StdDev" (default: "Mean"). *)
getStat[ds_, fileTag_String, col_String, stat_:"Mean"] := Module[{row, cols, cell},
  row  = SelectFirst[Normal@ds, StringContainsQ[ToString@Lookup[#, "File", ""], fileTag, IgnoreCase->True] &,
                     Missing["NotFound"]];
  If[MissingQ[row], Return[Missing["NA"]]];
  cols = Lookup[row, "Columns", <||>];
  cell = Lookup[cols, col, <||>];
  Lookup[cell, stat, Missing["NA"]]
];

(* Load newest math_check_results for EI / E-only from the single root *)
loadMathCheck[root_, variant_] := Module[{f},
  f = findNewestMathCheck[root, variant];
  If[MissingQ[f],
    <|"status" -> "not_found", "file" -> None, "data" -> Dataset[{}]|>,
    <|"status" -> "ok",       "file" -> f,    "data" -> safeImportDataset[f]|>
  ]
];

(* ========= Load both variants ========= *)
eiFiles    = findAllMathChecks[rootAll, "EI"];
eonlyFiles = findAllMathChecks[rootAll, "Eonly"];

Print["ðŸ“Š EI files found: ", Length[eiFiles]];
Print["ðŸ“Š E-only files found: ", Length[eonlyFiles]];

sumEI    = AssociationThread[eiFiles -> (summarizeAllFromMathCheck /@ (safeImportDataset /@ eiFiles))];
sumEonly = AssociationThread[eonlyFiles -> (summarizeAllFromMathCheck /@ (safeImportDataset /@ eonlyFiles))];

(* ========= Comparison ========= *)
allFiles = Union[Keys[sumEI], Keys[sumEonly]];
comparison = Dataset @ Flatten @ Table[
  With[{eiFile = Lookup[sumEI, file, <||>],
        eoFile = Lookup[sumEonly, file, <||>]},
    Table[
      <|
        "File"               -> file,
        "metric"             -> col,
        "E+I"                -> Lookup[eiFile, col, Missing["NA"]],
        "E-only"             -> Lookup[eoFile, col, Missing["NA"]],
        "diff(E+I - E-only)" -> Quiet @ Check[
          Lookup[eiFile, col, Missing["NA"]] - Lookup[eoFile, col, Missing["NA"]],
          Missing["NA"]
        ]
      |>,
      {col, Union[Keys[eiFile], Keys[eoFile]]}
    ]
  ],
  {file, allFiles}
];

comparison

(* ========= Output ========= *)
timestamp = DateString[{"Year","Month","Day","Hour","Minute","Second"}];
outRoot   = FileNameJoin[{$HomeDirectory, "Desktop", "TQE_E_plus_I_vs_E_only_" <> timestamp}];
If[!DirectoryQ[outRoot], CreateDirectory[outRoot]];

outCSV  = FileNameJoin[{outRoot, "comparison_summary.csv"}];
outJSON = FileNameJoin[{outRoot, "comparison_summary.json"}];

Export[outCSV, Normal @ comparison];

Export[
  outJSON,
  (Association[
     "files" -> <|
       "EI_count"    -> Length[eiFiles],
       "Eonly_count" -> Length[eonlyFiles]
     |>,
     "comparison_rows" -> Normal @ comparison
   ] /. {None -> Null, Missing[_] -> Null}),
  "JSON"
];

Print["âœ… Saved: ", outCSV];
Print["âœ… Saved: ", outJSON];
