(* SPDX-License-Identifier: MIT *)
(* Copyright (c) 2025 Stefan Len *)

(* ================================================================== *)
(*  TQE_Wolfram_Compare_From_MathCheck_Pipeline.nb                    *)
(*  Author: Stefan Len                                                *)
(* ================================================================== *)
(*  Notes: Compares E+I vs E-only based on CSV tables.                *)

(* ========= User inputs (root folders) ========= *)
rootEI    = "/Users/stevilen/Desktop/TQE_E_plus_I_vs_E_only/TQE_E_plus_I_Simulation";
rootEonly = "/Users/stevilen/Desktop/TQE_E_plus_I_vs_E_only/TQE_E_Only_Simulation";

(* ========= Helpers ========= *)

safeImportDataset[f_] := Quiet @ Check[Import[f, "Dataset"], Dataset[{}]];

listCSVs[root_] := Module[{all},
  all = Join[
    FileNames["*.csv", root, Infinity],
    FileNames["*.CSV", root, Infinity]
  ];
  Print["ðŸ“„ CSVs under ", root, ": ", Length[all]];
  Print /@ Take[all, UpTo[10]];
  all
];

findNewestMathCheck[root_, variant_] := Module[{all, keep, newest},
  all = Join[
    FileNames["*.csv", root, Infinity],
    FileNames["*.CSV", root, Infinity]
  ];
  keep = Select[all,
    If[variant === "EI",
      StringContainsQ[FileNameTake[#], "math_check_results_E_plus_I", IgnoreCase -> True]&,
      StringContainsQ[FileNameTake[#], "math_check_results_energy_only", IgnoreCase -> True]&
    ]
  ];
  newest = If[keep === {}, Missing["NotFound"],
    First @ Reverse @ SortBy[keep, FileDate]
  ];
  newest
];

safeNum[x_] := Which[
  NumericQ[x], ToString @ NumberForm[N@x, {6, 4}],
  True,       "NA"
];

(* === NEW: collect all metrics from all rows === *)
summarizeAllFromMathCheck[ds_] := Module[{rows},
  rows = Normal@ds;
  Association @ Table[
    With[{fname = Lookup[row, "File", "unknown"],
          cols = Lookup[row, "Columns", <||>]},
      fname -> Association @ Table[
        cname -> Lookup[Lookup[cols, cname, <||>], "Mean", Missing["NA"]],
        {cname, Keys[cols]}
      ]
    ],
    {row, rows}
  ]
];

(* ========= Load both variants ========= *)
ei    = loadMathCheck[rootEI, "EI"];
eonly = loadMathCheck[rootEonly, "Eonly"];

sumEI    = summarizeAllFromMathCheck[ei["data"]];
sumEonly = summarizeAllFromMathCheck[eonly["data"]];

(* ========= Comparison ========= *)
allFiles = Union[Keys[sumEI], Keys[sumEonly]];
comparison = Dataset @ Flatten @ Table[
  With[{eiFile = Lookup[sumEI, file, <||>],
        eoFile = Lookup[sumEonly, file, <||>]},
    Table[
      <|
        "File"               -> file,
        "metric"             -> col,
        "E+I"                -> Lookup[eiFile, col, Missing["NA"]],
        "E-only"             -> Lookup[eoFile, col, Missing["NA"]],
        "diff(E+I - E-only)" -> Quiet @ Check[
          Lookup[eiFile, col, Missing["NA"]] - Lookup[eoFile, col, Missing["NA"]],
          Missing["NA"]
        ]
      |>,
      {col, Union[Keys[eiFile], Keys[eoFile]]}
    ]
  ],
  {file, allFiles}
];

Print["E+I source: ", ei["file"]];
Print["E-only source: ", eonly["file"]];

comparison

(* ========= Output ========= *)
timestamp = DateString[{"Year","Month","Day","Hour","Minute","Second"}];
outRoot   = FileNameJoin[{$HomeDirectory, "Desktop", "TQE_E_plus_I_vs_E_only_" <> timestamp}];
If[!DirectoryQ[outRoot], CreateDirectory[outRoot]];

outCSV  = FileNameJoin[{outRoot, "comparison_summary.csv"}];
outJSON = FileNameJoin[{outRoot, "comparison_summary.json"}];

Export[outCSV, Normal @ comparison];

Export[
  outJSON,
  (Association[
     "files" -> <|
       "E+I_source"    -> ei["file"],
       "E-only_source" -> eonly["file"]
     |>,
     "comparison_rows" -> Normal @ comparison
   ] /. {None -> Null, Missing[_] -> Null}),
  "JSON"
];

Print["âœ… Saved: ", outCSV];
Print["âœ… Saved: ", outJSON];
