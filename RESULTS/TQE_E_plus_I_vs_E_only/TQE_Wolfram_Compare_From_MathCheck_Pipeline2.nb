(* SPDX-License-Identifier: MIT *)
(* Copyright (c) 2025 Stefan Len *)

(* ================================================================== *)
(*  TQE_Wolfram_Compare_From_MathCheck_Pipeline.nb                    *)
(*  Author: Stefan Len                                                *)
(* ================================================================== *)
(*  Notes: Compares E+I vs E-only based on CSV tables.                *)


(* ========= User inputs ========= *)
rootAll = "/Users/stevilen/Desktop/TQE_E_plus_I_vs_E_only";

(* ========= Helpers ========= *)

safeImport[f_] := Quiet @ Check[Import[f, "Data"], {}];

listCSVs[root_] := Module[{all},
  all = Union[
    FileNames["*.csv", root, Infinity],
    FileNames["*.CSV", root, Infinity]
  ];
  Print["ðŸ“„ CSVs under ", root, ": ", Length[all]];
  Print /@ Take[all, UpTo[10]];
  all
];

(* Find all CSV for EI or E-only *)
findAllMathChecks[root_, variant_] := Module[{all, pats, keep},
  pats = If[variant === "EI",
    {"_EI_", "E_plus_I", "E+I"},
    {"energy_only", "E_only", "energy-only"}
  ];
  all = Union[
    FileNames["*.csv", root, Infinity],
    FileNames["*.CSV", root, Infinity]
  ];
  keep = Select[all, StringContainsQ[FileNameTake[#], Alternatives @@ pats, IgnoreCase -> True] &];
  SortBy[keep, FileDate]
];

(* Calculate statistics from raw CSV data *)
calculateStats[data_, filename_] := Module[{header, numericData, stats},
  If[Length[data] < 2, Return[<||>]];
  
  header = First[data];
  numericData = DeleteCases[Rest[data], {}];
  
  If[Length[numericData] == 0, Return[<||>]];
  
  stats = Association @ Table[
    col -> <|
      "Mean" -> Mean[#],
      "StdDev" -> If[Length[#] > 1, StandardDeviation[#], 0],
      "Min" -> Min[#],
      "Max" -> Max[#],
      "Count" -> Length[#]
    |> & @ Cases[numericData, {___, x_, ___} :> x][[All, i]],
    {i, Length[header]}, {col, header}
  ];
  
  <|"File" -> filename, "Columns" -> stats|>
];

(* Process all files and extract statistics *)
processFiles[fileList_] := Association @ Map[
  Function[file,
    file -> calculateStats[safeImport[file], FileNameTake[file]]
  ],
  fileList
];

(* ========= Load both variants ========= *)
eiFiles    = findAllMathChecks[rootAll, "EI"];
eonlyFiles = findAllMathChecks[rootAll, "Eonly"];

Print["ðŸ“Š EI files found: ", Length[eiFiles]];
Print["ðŸ“Š E-only files found: ", Length[eonlyFiles]];

sumEI    = processFiles[eiFiles];
sumEonly = processFiles[eonlyFiles];

(* ========= Comparison ========= *)
allFiles = Union[Keys[sumEI], Keys[sumEonly]];
comparison = Dataset @ Flatten @ Table[
  With[{eiData = Lookup[sumEI, file, <||>],
        eoData = Lookup[sumEonly, file, <||>]},
        
    Table[
      <|
        "File"               -> file,
        "metric"             -> col,
        "E+I_Mean"           -> Lookup[Lookup[Lookup[eiData, "Columns", <||>], col, <||>], "Mean", Missing["NA"]],
        "E-only_Mean"        -> Lookup[Lookup[Lookup[eoData, "Columns", <||>], col, <||>], "Mean", Missing["NA"]],
        "diff(E+I - E-only)" -> Quiet @ Check[
          Lookup[Lookup[Lookup[eiData, "Columns", <||>], col, <||>], "Mean", Missing["NA"]] - 
          Lookup[Lookup[Lookup[eoData, "Columns", <||>], col, <||>], "Mean", Missing["NA"]],
          Missing["NA"]
        ]
      |>,
      {col, Union[Keys[Lookup[eiData, "Columns", <||>]], Keys[Lookup[eoData, "Columns", <||>]]]}
    ]
  ],
  {file, allFiles}
];

comparison

(* ========= Output ========= *)
timestamp = DateString[{"Year","Month","Day","Hour","Minute","Second"}];
outRoot   = FileNameJoin[{$HomeDirectory, "Desktop", "TQE_E_plus_I_vs_E_only_" <> timestamp}];
If[!DirectoryQ[outRoot], CreateDirectory[outRoot]];

outCSV  = FileNameJoin[{outRoot, "comparison_summary.csv"}];
outJSON = FileNameJoin[{outRoot, "comparison_summary.json"}];

Export[outCSV, Normal @ comparison];

Export[
  outJSON,
  (Association[
     "files" -> <|
       "EI_count"    -> Length[eiFiles],
       "Eonly_count" -> Length[eonlyFiles]
     |>,
     "comparison_rows" -> Normal @ comparison
   ] /. {None -> Null, Missing[_] -> Null}),
  "JSON"
];

Print["âœ… Saved: ", outCSV];
Print["âœ… Saved: ", outJSON];
