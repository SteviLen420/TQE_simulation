(* SPDX-License-Identifier: MIT *)
(* Copyright (c) 2025 Stefan Len *)

(* ================================================================== *)
(*  TQE_Wolfram_Math_Check_Pipeline.nb                                *)
(*  Author: Stefan Len                                                *)
(* ================================================================== *)
(*  Simple mathematical check for all CSV files in a simulation run   *)

ClearAll["Global`*"];

(* Safe import of CSV as Dataset, empty if error *)
safeImport[f_] := Quiet @ Check[Import[f, "Dataset"], Dataset[{}]];

(* Safe stddev: 0 if fewer than 2 elements *)
safeStdDev[list_] := If[Length[list] >= 2, N@StandardDeviation[list], 0];

(* Sanitize results for JSON export *)
sanitizeForJSON[expr_] := expr /. {
   Missing[_] -> Null,
   Times -> Null, Power -> Null,
   r_Rational :> N[r],                (* convert rationals to decimal *)
   _Symbol?(!NumericQ[#] &) :> Null
};

(* Analyze one CSV file column by column *)
analyzeCSV[file_String] := Module[{ds, cols, summary, valsAll, anyNaN, anyInfinity, anyMissing},
  ds = safeImport[file];
  If[Length[ds] == 0, Return[<|"File" -> FileBaseName[file], "Status" -> "Empty"|>]];

  valsAll      = Flatten[Values /@ Normal[ds[All, All]]];
  anyNaN       = AnyTrue[valsAll, # === Indeterminate &];
  anyInfinity  = AnyTrue[valsAll, MatchQ[#, Infinity | -Infinity | _DirectedInfinity] &];
  anyMissing   = AnyTrue[valsAll, MatchQ[#, _Missing] &];

  cols = Keys[Normal @ First[ds]];
  summary = Association @ Table[
    col -> Module[{vals = DeleteMissing @ Cases[Normal[ds[All, col]], _?NumericQ]},
      If[Length[vals] == 0, <|"Mean" -> Null, "StdDev" -> Null|>,
        <|"Mean" -> N@Mean[vals], "StdDev" -> safeStdDev[vals]|>]
    ],
    {col, cols}
  ];

  <|
    "File" -> FileBaseName[file],
    "TotalRows" -> Length[ds],
    "AnyNaN" -> anyNaN,
    "AnyInfinity" -> anyInfinity,
    "AnyMissing" -> anyMissing,
    "Columns" -> summary
  |>
]

(* ================================================================== *)
(*  Main execution: scan all CSVs in the chosen simulation directory  *)
(* ================================================================== *)

simDir = "/Users/stevilen/Desktop/TQE_EI_SIMULATION_COLAB_GPU/TQE_Universe_Simulation_Full_Pipeline__energy_only_20250918_214751/CSV";

files = FileNames["*.csv", simDir, Infinity];
Print["ðŸ“‚ Found CSV files: ", Length[files]];

results = analyzeCSV /@ files;

Dataset[results]

(* ================================================================== *)
(*  Export results to Desktop (both CSV + JSON)                       *)
(* ================================================================== *)

timestamp = DateString[{"Year","Month","Day","Hour","Minute","Second"}];
outDir = FileNameJoin[{$HomeDirectory, "Desktop", "TQE_Math_Check_" <> timestamp}];
If[!DirectoryQ[outDir], CreateDirectory[outDir, CreateIntermediateDirectories -> True]];

(* Save CSV as-is *)
Export[FileNameJoin[{outDir, "math_check_results.csv"}],
  Normal @ Dataset[results]
]

(* Prepare JSON-safe structure *)
jsonResults = Normal @ Map[
  Function[a, <|
    "File"->a["File"], "TotalRows"->a["TotalRows"],
    "AnyNaN"->a["AnyNaN"], "AnyInfinity"->a["AnyInfinity"],
    "AnyMissing"->a["AnyMissing"],                 (* + *)
    "Columns"->Normal[a["Columns"] /. (Null|None)->Null]
  |>],
  results
];

(* Save clean JSON *)
Export[FileNameJoin[{outDir, "math_check_results.json"}], jsonResults, "JSON"];


Print["âœ… Math check finished, results saved to: ", outDir];
