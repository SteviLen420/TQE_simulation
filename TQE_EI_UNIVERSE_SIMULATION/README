[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
# ===================================================================================
#  TQE (E,I) UNIVERSE SIMULATION PIPELINE
# ===================================================================================
# Author: Stefan Len
# ===================================================================================

===================================================================================
Title: The TQE Framework: A Modular, Reproducible Pipeline for Monte Carlo
Simulation of Universe Evolution from Energy-Information Principles
===================================================================================

ABSTRACT
-----------------------------------------------------------------------------------
In this work, I present a comprehensive computational framework, TQE, 
for conducting large-scale Monte Carlo simulations of universe evolution.
The model is based on the foundational hypothesis of a coupling between 
abstract 'Energy' (E) and 'Information' (I) principles, which jointly determine 
the developmental trajectory of each simulated universe. The framework is 
implemented as a modular, multi-stage Python pipeline designed for rigorous 
scientific investigation.

The key stages encompass:
(i) a centralized, deterministic seeding mechanism to ensure full reproducibility;
(ii) initialization of E and I parameters for a population of universes;
(iii) a pre-collapse phase modeling quantum superposition and fluctuation dynamics;
(iv) a critical "law lock-in" event where fundamental properties stabilize
from a chaotic state;
(v) a post-collapse expansion phase; and
(vi) a suite of advanced analysis modules.

These modules perform deep diagnostics, including the procedural generation of
CMB-like maps, the quantification of fine-tuning metrics, and the statistical
analysis of cosmological anomalies (e.g., Cold Spot, low-multipole alignments).
Furthermore, an integrated Explainable AI (XAI) module employs machine learning
models (Random Forest, SHAP, LIME) to determine the causal relationships between
initial parameters and emergent universal properties. The entire pipeline is
architected for robustness, featuring configuration-driven execution via profiles
and a final manifest-generation stage that consolidates all parameters, data,
and metadata into a navigable, publication-ready dataset.


===================================================================================
1. COMPUTATIONAL FRAMEWORK AND METHODOLOGY
===================================================================================

The TQE pipeline is a sequence of 20 interoperable Python modules designed to
simulate and analyze an ensemble of universes. The architecture can be logically
divided into four main components.

-----------------------------------------------------------------------------------
1.1. Framework Architecture and Reproducibility (Modules 00-04)
-----------------------------------------------------------------------------------
The foundation of the pipeline ensures consistency, configurability, and
reproducibility.

- Configuration and Orchestration (00_config, 01_Master_Control): A centralized
  dictionary (`MASTER_CTRL`) contains all parameters for the simulation and
  analysis. This allows for configuration-driven execution, with profiles (e.g.,
  `demo`, `paper`) enabling rapid testing and production runs. The
  `Master_Control` module also serves as the execution harness, dynamically
  calling each stage in sequence.

- I/O and Environment Handling (02_io_paths, 03_imports): A dedicated I/O module
  robustly manages file paths for different environments (e.g., local desktop,
  Google Colab with automated Drive mounting). It generates a unique, timestamped
  run directory for each execution, preventing data overwrites. A central `imports`
  module ensures all other modules share the same library versions and cached
  run paths.

- Seeding and RNG (04_seeding): This is the cornerstone of reproducibility.
  Upon the first execution in a new run directory, a single, high-entropy 64-bit
  "master seed" is generated and saved. The `numpy.random.SeedSequence.spawn()`
  method is then used to deterministically derive a unique, independent seed for
  each of the N universes. All subsequent stochastic processes in the pipeline are
  seeded from either the master seed or the specific per-universe seed,
  guaranteeing bit-for-bit reproducibility of any given run.

-----------------------------------------------------------------------------------
1.2. Simulation Core: Universe Generation and Evolution (Modules 05-10)
-----------------------------------------------------------------------------------
This component simulates the life cycle of each universe.

- Initialization (05_energy_sampling, 06_information_bootstrap): The
  simulation begins by sampling initial `E0` (Energy) and `I0` (Information)
  values for the entire population from specified distributions.

- Pre-Collapse Dynamics (07_fluctuation, 08_superposition): These modules model
  the initial chaotic state before universal laws are fixed. This includes a
  fluctuation phase and an optional quantum superposition stage that can
  leverage the `qutip` library to model quantum states, from which information
  metrics are derived.

- Law Lock-in (09_collapse_LawLockin): A critical event where a fluctuating "law"
  variable `L(t)` evolves under decaying noise. Based on the coupled `X = f(E,I)`
  parameter and stability thresholds, this variable may or may not stabilize
  ("lock-in"), representing the emergence of fixed physical laws.

- Expansion (10_expansion): Universes that successfully lock-in enter a
  post-collapse expansion phase. A size parameter `S(t)` evolves via a
  multiplicative growth process, where the growth rate is modulated by the
  universe's `X` value and subject to decaying noise.

-----------------------------------------------------------------------------------
1.3. Analysis Suite: Diagnostics and Anomaly Detection (Modules 11-18)
-----------------------------------------------------------------------------------
This component analyzes the properties of the simulated population of universes.

- Aggregation and Ranking (11_montecarlo, 12_best_universe): Results from the
  collapse and expansion phases are merged into a master `DataFrame`. A weighted
  scoring function is then applied to rank universes based on metrics like
  growth, stability, and speed of lock-in, identifying the "best" universes.

- Map Generation and Diagnostics (13_cmb_map_generation, 14_finetune_diagnostics):
  For each universe, a 2D CMB-like map is procedurally generated. These maps are
  then analyzed for fine-tuning indicators, including RMS, spectral slope (`alpha`),
  correlation length, skewness, and kurtosis.

- Anomaly Detection (15-18): The simulated CMB maps are algorithmically searched
  for four well-known cosmological anomalies: the Cold Spot, Low-Multipole
  (Quadrupole-Octopole) Alignments, Lack of Large-Angle Correlation, and
  Hemispherical Power Asymmetry.

-----------------------------------------------------------------------------------
1.4. Meta-Analysis and Finalization (Modules 19-20)
-----------------------------------------------------------------------------------
The final component provides a high-level interpretation and summary of the
entire run.

- Explainable AI (XAI) (19_xai): A comprehensive dataset is automatically
  aggregated from all previous stages. Machine learning models (Random Forest)
  are trained to predict various outcomes (e.g., `S_final`, `lockin_at`, anomaly
  presence) from the initial `E` and `I` parameters. SHAP and LIME analyses are
  then performed to calculate feature importance, providing insight into the
  causal drivers within the simulation.

- Manifest Generation (20_results_manifest): The final module scans the entire
  run directory, collecting all generated summary files (JSONs) and data tables
  (CSVs). It produces two key outputs: a master `run_manifest.json` that serves
  as a navigable table of contents for the run, and a single, wide-format
  `per_universe_summary.csv` that consolidates the most critical metrics for each
  universe, ready for final statistical analysis.



===================================================================================
TQE (E,I) UNIVERSE SIMULATION — PRACTICAL USAGE GUIDE 
===================================================================================

This guide describes how to install, configure, run, and interpret the outputs 
of the TQE pipeline.

-----------------------------------------------------------------------------------
1) ENVIRONMENT & DEPENDENCIES
-----------------------------------------------------------------------------------

Recommended Python: 3.9–3.11
OS: Linux / macOS / Windows (note: healpy requires native build tools)

Required packages:
  - numpy
  - pandas
  - matplotlib
  - scikit-learn

Optional (enable extra functionality):
  - healpy   — HEALPix ops (needed by LLAC/HPA modules and spherical maps)
  - scipy    — required where sph_harm is used (low-ℓ alignment fallback)
  - qutip    — optional for quantum/superposition stages
  - shap     — SHAP explanations in XAI module
  - lime     — LIME explanations in XAI module

Quick install (pip):
    python -m venv .venv
    # Linux/macOS:
    source .venv/bin/activate
    # Windows:
    # .venv\Scripts\activate

    pip install -U pip wheel setuptools
    pip install numpy pandas matplotlib scikit-learn
    # optional extras:
    pip install healpy scipy shap lime

Notes on healpy:
  • You may need build tools (Linux: build-essential; macOS: Xcode CLT).
  • If you hit build issues, try installing 'astropy' first, then 'healpy'.


-----------------------------------------------------------------------------------
2) PROJECT FILES & SHARED IMPORTS
-----------------------------------------------------------------------------------

Many modules share the same configuration and run paths through:
  • TQE_03_EI_UNIVERSE_SIMULATION_imports → exports:
      - ACTIVE  : dict with the active configuration
      - PATHS   : dict with environment info (incl. mirrors)
      - RUN_DIR : base directory for this run (unique, timestamped)
      - FIG_DIR : figures directory for this run
  • TQE_04_EI_UNIVERSE_SIMULATION_seeding → provides:
      - load_or_create_run_seeds(active_cfg)
      - universe_rngs(universe_seeds)

Run your scripts from the project root so these modules resolve on PYTHONPATH.

-----------------------------------------------------------------------------------
3a) Installation / Requirements 
-----------------------------------------------------------------------------------

**Prerequisites**
- Python 3.9–3.11
- Git
- (Optional / Opcionális) Build tools for some extras:
  - **Linux**: `build-essential`, `python3-dev`, `gfortran` (for healpy)
  - **macOS**: Xcode Command Line Tools (`xcode-select --install`), optionally Homebrew `gcc`
  - **Windows**: Recent Python from python.org; if venv activation is blocked:  
    `Set-ExecutionPolicy -Scope CurrentUser RemoteSigned`

> If `healpy` build fails, try installing `astropy` first, then `healpy`.

### Quick start — Linux/macOS

# 1) Clone the repository
git clone https://github.com/<your-username>/<your-project>.git
cd <your-project>

# 2) Create & activate a virtual environment
python -m venv .venv
source .venv/bin/activate

# 3) Upgrade pip tooling
pip install -U pip wheel setuptools

# 4) Install core dependencies
pip install -r requirements.txt

# 5) (Optional) Extras used by certain modules
#    healpy   → spherical maps / LLAC & HPA modules
#    scipy    → low-ℓ alignment fallback (sph_harm)
#    shap     → SHAP explanations in XAI
#    lime     → LIME explanations in XAI
#    qutip    → quantum/superposition stages
pip install healpy scipy shap lime qutip

# 1) Clone the repository
git clone https://github.com/<your-username>/<your-project>.git
cd <your-project>

# 2) Create & activate a virtual environment
py -3 -m venv .venv
.\.venv\Scripts\Activate.ps1

# 3) Upgrade pip tooling
python -m pip install -U pip wheel setuptools

# 4) Install core dependencies
pip install -r requirements.txt

# 5) (Optional) Extras used by certain modules
pip install healpy scipy shap lime qutip

-----------------------------------------------------------------------------------
3b) CONFIGURATION (ACTIVE) — MINIMAL WORKING EXAMPLE
-----------------------------------------------------------------------------------

ACTIVE = {
  "PIPELINE": {
    "use_information": True,        # EI vs E mode → filename tag: 'EI__' or 'E__'
    "run_anomaly_scan": True
  },
  "ENERGY": {
    "num_universes": 1000,
    "seed": None                    # fallback seed if seeding module not used
  },
  "ANOMALY": {
    "map": {
      "resolution_nside": 128,
      "seed_per_map": True
    },
    "targets": [
      {"name": "cold_spot", "enabled": True, "patch_deg": 10.0, "zscore_thresh": 3.0},
      {"name": "quad_oct_align", "enabled": True, "l2l3_align_deg": 20.0},
      {"name": "lack_large_angle", "enabled": True, "theta_min_deg": 60.0, "lmax": 64,
       "n_mc": 200, "p_percentile": 0.05},
      {"name": "hemispheric_asymmetry", "enabled": True, "l_max": 40, "n_mc": 200,
       "pval_thresh": 0.05}
    ],
    "save_cutouts": True,
    "save_metrics_csv": True
  },
  "FINETUNE_DIAG": { "top_k": 5 },
  "XAI": {
    "test_size": 0.25,
    "test_random_state": 42,
    "rf_n_estimators": 400,
    "rf_class_weight": None,
    "regression_min": 10,
    "lime_num_features": 5,
    "sklearn_n_jobs": -1,
    "run_lime": True
  },
  "OUTPUTS": {
    "local": { "fig_subdir": "figs" },
    # "mirrors": ["/mnt/drive/tqe_mirror", "D:/results_mirror"]  # optional
  },
  "RUNTIME": { "matplotlib_dpi": 180 }
}

-----------------------------------------------------------------------------------
4) RUNNING THE MODULES
-----------------------------------------------------------------------------------

### Recommended Method: Using the Master Controller

The primary way to run the entire end-to-end pipeline is by executing 
the `TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py` script. The behavior 
of the run is controlled by the `TQE_PROFILE` environment variable.

**Example (Linux/macOS):**
export TQE_PROFILE=demo
python TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py

Example (Windows PowerShell):
$Env:TQE_PROFILE = 'demo'
python TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py

# 13 — CMB-like map generation
python TQE_13_EI_UNIVERSE_SIMULATION_cmb_map_generation.py

# 14 — Fine-tuning diagnostics on maps
python TQE_14_EI_UNIVERSE_SIMULATION_finetune_diagnostics.py

# 15 — Cold Spot anomaly
python TQE_15_EI_UNIVERSE_SIMULATION_anomaly_cold_spot.py

# 16 — Low-ℓ (l=2,3) alignment
python TQE_16_EI_UNIVERSE_SIMULATION_anomaly_low_multipole_alignments.py

# 17 — Lack of Large-Angle Correlation (needs healpy)
python TQE_17_EI_UNIVERSE_SIMULATION_anomaly_LackOfLargeAngleCorrelation.py

# 18 — Hemispherical Power Asymmetry (needs healpy)
python TQE_18_EI_UNIVERSE_SIMULATION_anomaly_HemisphericalAsymmetry.py

# 19 — XAI (RandomForest + SHAP/LIME if installed)
python TQE_19_EI_UNIVERSE_SIMULATION_xai.py

from TQE_13_EI_UNIVERSE_SIMULATION_cmb_map_generation import run_cmb_map_generation
from TQE_14_EI_UNIVERSE_SIMULATION_finetune_diagnostics import run_finetune_stage
from TQE_15_EI_UNIVERSE_SIMULATION_anomaly_cold_spot import run_anomaly_cold_spot
from TQE_16_EI_UNIVERSE_SIMULATION_anomaly_low_multipole_alignments import \
    run_anomaly_low_multipole_alignments_stage
from TQE_17_EI_UNIVERSE_SIMULATION_anomaly_LackOfLargeAngleCorrelation import run_llac
from TQE_18_EI_UNIVERSE_SIMULATION_anomaly_HemisphericalAsymmetry import run_hpa
from TQE_19_EI_UNIVERSE_SIMULATION_xai import run_xai_stage
from TQE_03_EI_UNIVERSE_SIMULATION_imports import ACTIVE, PATHS

run_cmb_map_generation(ACTIVE)
run_finetune_stage(ACTIVE)
run_anomaly_cold_spot(ACTIVE)
run_anomaly_low_multipole_alignments_stage(ACTIVE)
run_llac(ACTIVE)  # needs healpy
run_hpa(ACTIVE)   # needs healpy
run_xai_stage(ACTIVE, paths=PATHS)

-----------------------------------------------------------------------------------
5) OUTPUTS & FILENAMING
-----------------------------------------------------------------------------------

• RUN_DIR — unique (timestamped) run directory; FIG_DIR under it for figures.
• EI/E tag — filenames are prefixed with 'EI__' or 'E__' per PIPELINE.use_information.
• Mirroring — if OUTPUTS.local.mirrors is set:
    - CSV/JSON copied to the mirror root.
    - PNGs copied into <mirror>/<fig_subdir>/ (default 'figs').

Typical artifacts:
  - EI__cmb_maps.csv       + per-universe *.npy and PNG previews (module 13)
  - EI__finetune_metrics.csv, EI__finetune_summary.json (module 14)
  - EI__anomaly_cold_spot_metrics.csv + cutout PNGs (module 15)
  - EI__anomaly_low_multipole_align.csv + histogram PNG (module 16)
  - LLAC__metrics.csv, LLAC__summary.json + S1/2 histogram (module 17; untagged by design)
  - EI__anomaly_hpa_metrics.csv + ratio histogram (module 18)
  - EI__xai_dataset.csv, EI__xai_global_feature_ranking.csv, EI__xai_summary.json,
    SHAP/LIME figures (module 19)

-----------------------------------------------------------------------------------
6) Profiles — Available Runtime Profiles
-----------------------------------------------------------------------------------

What is a profile?
A “profile” bundles runtime settings for the pipeline (e.g., number of universes,
anomaly scan parameters, output mirrors). You select a profile with the TQE_PROFILE
environment variable. If none is set, the configuration’s DEFAULT_PROFILE is used.

Where are profiles defined?
Profiles live in the configuration module (e.g., TQE_00_EI_UNIVERSE_SIMULATION_config.py)
inside a PROFILES dictionary. The Master Controller reads this and constructs the
ACTIVE configuration that all modules import via
TQE_03_EI_UNIVERSE_SIMULATION_imports.

Typical profiles (examples):
- demo  — small num_universes, fast test, lower n_mc
- paper — large sample sizes, full MC/diagnostics, publication runs
- colab — Google Colab–friendly settings (Drive mirror, modest resources)

Select a profile at runtime

Linux/macOS (bash/zsh):
    export TQE_PROFILE=demo
    python TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py

Windows (PowerShell):
    $Env:TQE_PROFILE = 'demo'
    python TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py


Where & how to add/modify profiles
Open the config file (e.g., TQE_00_EI_UNIVERSE_SIMULATION_config.py) and edit the
PROFILES dictionary. The following schema is a guide (adjust to your repo):

    # TQE_00_EI_UNIVERSE_SIMULATION_config.py — example schema
    DEFAULT_PROFILE = "demo"

    PROFILES = {
        "demo": {
            "PIPELINE": {"use_information": True, "run_anomaly_scan": True},
            "ENERGY":   {"num_universes": 200, "seed": None},
            "ANOMALY": {
                "map": {"resolution_nside": 128, "seed_per_map": True},
                "targets": [
                    {"name": "cold_spot", "enabled": True, "patch_deg": 10.0, "zscore_thresh": 3.0},
                    {"name": "quad_oct_align", "enabled": True, "l2l3_align_deg": 20.0},
                    {"name": "lack_large_angle", "enabled": True, "theta_min_deg": 60.0,
                     "lmax": 64, "n_mc": 100, "p_percentile": 0.05},
                ],
                "save_cutouts": True,
                "save_metrics_csv": True,
            },
            "OUTPUTS": {"local": {"fig_subdir": "figs"}, "mirrors": []},
            "RUNTIME": {"matplotlib_dpi": 180},
            "XAI": {"test_size": 0.25, "rf_n_estimators": 300, "sklearn_n_jobs": -1, "run_lime": True},
        },

        "paper": {
            # Example: larger N / deeper MC
            # "ENERGY": {"num_universes": 5000},
            # "ANOMALY": {"targets": [...], "map": {"resolution_nside": 256}, ...},
            # "XAI": {"rf_n_estimators": 800, ...},
        },

        "colab": {
            # Colab-friendly: smaller N, Google Drive mirror, etc.
            # "OUTPUTS": {"local": {"fig_subdir": "figs"}, "mirrors": ["/content/drive/MyDrive/tqe_runs"]},
        },
    }

Quickly add a new profile (copy from demo):

    PROFILES["my_profile"] = {
        **PROFILES["demo"],
        "ENERGY": {**PROFILES["demo"]["ENERGY"], "num_universes": 1500},
        "ANOMALY": {
            **PROFILES["demo"]["ANOMALY"],
            "targets": [
                *PROFILES["demo"]["ANOMALY"]["targets"],
                {"name": "hemispheric_asymmetry", "enabled": True, "l_max": 40, "n_mc": 200, "pval_thresh": 0.05},
            ],
        },
    }

Run with the new profile

Linux/macOS:
    export TQE_PROFILE=my_profile
    python TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py

Windows (PowerShell):
    $Env:TQE_PROFILE = 'my_profile'
    python TQE_01_EI_UNIVERSE_SIMULATION_Master_Control.py

List available profiles

Linux/macOS:
    python -c "from TQE_00_EI_UNIVERSE_SIMULATION_config import PROFILES; print(', '.join(PROFILES.keys()))"

Windows (PowerShell):
    python -c "from TQE_00_EI_UNIVERSE_SIMULATION_config import PROFILES; print(', '.join(PROFILES.keys()))"

-----------------------------------------------------------------------------------
7) REPRODUCIBILITY (SEEDING)
-----------------------------------------------------------------------------------

• A master 64-bit seed and per-universe seeds are generated and stored by module 04.
• Downstream modules use these seeds (load_or_create_run_seeds / universe_rngs).
• If seeding is unavailable, modules fall back to deterministic seeds via ACTIVE['ENERGY']['seed'].
• Using the same ACTIVE and RUN_DIR yields bit-for-bit identical results.


-----------------------------------------------------------------------------------
8) RECOMMENDED END-TO-END ORDER
-----------------------------------------------------------------------------------

(00–04) Setup: config, paths, imports, seeding
(05–10) Simulation core: E/I init → fluctuation/superposition → law lock-in → expansion
(11–12) Aggregation and ranking
(13–14) Map generation + fine-tuning diagnostics
(15–18) Anomaly scans (Cold Spot, low-ℓ alignment, LLAC, HPA)
(19)    XAI (RF + SHAP/LIME)
(20)    Results manifest (if implemented in your repo)

Note: Modules 13–19 are individually runnable, provided their expected inputs exist
(e.g., module 15 automatically picks up the map manifest from module 13).


-----------------------------------------------------------------------------------
9) PERFORMANCE TIPS
-----------------------------------------------------------------------------------

• Set ACTIVE['XAI']['sklearn_n_jobs'] = -1 to use all cores for RandomForest.
• For large N, healpy-based modules (17, 18) are CPU-heavy:
    - reduce ANOMALY.targets[*]['n_mc'] during iteration,
    - or temporarily lower ENERGY.num_universes.
• Control figure resolution with ACTIVE['RUNTIME']['matplotlib_dpi'].


-----------------------------------------------------------------------------------
10) TROUBLESHOOTING
-----------------------------------------------------------------------------------

• ImportError for shared modules:
    - Run from the project root; ensure TQE_03_* and TQE_04_* are on PYTHONPATH.
• healpy build errors:
    - Install native build tools; try 'pip install astropy' first, then 'healpy'.
• SciPy missing:
    - Low-ℓ alignment path that relies on sph_harm requires 'scipy'.
• Missing inputs (e.g., CMB manifest):
    - Run module 13 first to generate EI__cmb_maps.csv and the per-universe maps.
• Mirror copy warnings:
    - Check write permissions and existence of mirror paths.


-----------------------------------------------------------------------------------
11) MINIMAL END-TO-END SNIPPET
-----------------------------------------------------------------------------------

from TQE_13_EI_UNIVERSE_SIMULATION_cmb_map_generation import run_cmb_map_generation
from TQE_14_EI_UNIVERSE_SIMULATION_finetune_diagnostics import run_finetune_stage
from TQE_15_EI_UNIVERSE_SIMULATION_anomaly_cold_spot import run_anomaly_cold_spot
from TQE_16_EI_UNIVERSE_SIMULATION_anomaly_low_multipole_alignments import \
    run_anomaly_low_multipole_alignments_stage
from TQE_17_EI_UNIVERSE_SIMULATION_anomaly_LackOfLargeAngleCorrelation import run_llac
from TQE_18_EI_UNIVERSE_SIMULATION_anomaly_HemisphericalAsymmetry import run_hpa
from TQE_19_EI_UNIVERSE_SIMULATION_xai import run_xai_stage
from TQE_03_EI_UNIVERSE_SIMULATION_imports import ACTIVE, PATHS

run_cmb_map_generation(ACTIVE)
run_finetune_stage(ACTIVE)
run_anomaly_cold_spot(ACTIVE)
run_anomaly_low_multipole_alignments_stage(ACTIVE)
run_llac(ACTIVE)  # requires healpy
run_hpa(ACTIVE)   # requires healpy
run_xai_stage(ACTIVE, paths=PATHS)

print("Done. See RUN_DIR/FIG_DIR for outputs, mirrored to configured 'mirrors' (if any).")

===================================================================================
END OF DROP-IN CELL
===================================================================================
